name: Hourly Orderflow Upload

on:
  schedule:
    - cron: '30 * * * *'  # 🔥 Every hour IST
  workflow_dispatch:       # 🔥 Manual trigger support

jobs:
  upload-orderflow:
    runs-on: ubuntu-latest

    env:
      RENDER_API_BASE: https://comoflo.onrender.com/api  # 🔥 Your Flask API base URL
      GITHUB_REPO: vishtheendodoc/comoflo                # 🔥 Your GitHub username/repo
      DATA_FOLDER: data_snapshots
      GITHUB_TOKEN: ${{ secrets.MY_PAT }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install requests pandas PyGithub

    - name: Fetch and upload data
      run: |
        python - <<EOF
        import requests, pandas as pd
        from datetime import datetime
        from github import Github
        import os, time

        # --- Config ---
        api_base = "${{ env.RENDER_API_BASE }}"
        api_stocks = f"{api_base}/stocks"
        api_data = f"{api_base}/delta_data/"
        repo_name = "${{ env.GITHUB_REPO }}"
        token = os.environ["GITHUB_TOKEN"]
        now = datetime.utcnow()
        filename = f"orderflow_{now.strftime('%Y%m%d_%H')}.csv"
        remote_path = f"{os.environ['DATA_FOLDER']}/{filename}"

        # --- Helper: Retry GET requests ---
        session = requests.Session()
        adapter = requests.adapters.HTTPAdapter(max_retries=5)
        session.mount('https://', adapter)
        session.mount('http://', adapter)

        def fetch_json(url, timeout=60):
            for attempt in range(1, 6):
                try:
                    print(f"🔄 Attempt {attempt}: {url}")
                    resp = session.get(url, timeout=timeout)
                    resp.raise_for_status()
                    return resp.json()
                except Exception as e:
                    print(f"⚠️ Attempt {attempt} failed: {e}")
                    if attempt < 5:
                        time.sleep(5 * attempt)  # exponential backoff
            print(f"❌ Failed after 5 attempts: {url}")
            return None

        # --- Fetch security IDs from /api/stocks ---
        print("📡 Fetching stock list...")
        stock_list = fetch_json(api_stocks)
        if not stock_list:
            print("❌ Could not fetch stock list. Exiting.")
            exit(1)

        security_ids = [str(s['security_id']) for s in stock_list if 'security_id' in s]
        print(f"✅ Found {len(security_ids)} securities")

        # --- Fetch data for each security ---
        combined_df = pd.DataFrame()
        for sid in security_ids:
            data = fetch_json(f"{api_data}{sid}?interval=1")
            if data:
                df = pd.DataFrame(data)
                df['security_id'] = sid
                combined_df = pd.concat([combined_df, df], ignore_index=True)
            else:
                print(f"⚠️ Skipped {sid} due to errors")

        if combined_df.empty:
            print("⚠️ No data fetched for any security. Skipping upload.")
            exit(0)

        combined_df.to_csv(filename, index=False)
        print(f"✅ Saved snapshot: {filename}")

        # --- Upload to GitHub ---
        g = Github(token)
        repo = g.get_repo(repo_name)
        try:
            contents = repo.get_contents(remote_path)
            repo.update_file(contents.path, f"Update {remote_path}", open(filename, "rb").read(), contents.sha)
            print(f"✅ Updated {remote_path}")
        except:
            repo.create_file(remote_path, f"Create {remote_path}", open(filename, "rb").read())
            print(f"✅ Created {remote_path}")
        EOF
